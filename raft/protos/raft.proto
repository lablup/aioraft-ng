syntax = "proto3";

service RaftService {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
}

message AppendEntriesRequest {
    uint64 term = 1;                // leader's term
    string leader_id = 2;           // so follower can redirect clients
    uint64 prev_log_index = 3;      // index of log entry immediately preceding new ones
    uint64 prev_log_term = 4;       // term of prevLogIndex entry
    repeated Log entries = 5;       // log entries to store (empty for heartbeat; may send more than one for efficiency)
    uint64 leader_commit = 6;       // leader's commitIndex
}

message AppendEntriesResponse {
    uint64 term = 1;                // currentTerm, for leader to update itself
    bool success = 2;               // true if follower contained entry matching prevLogIndex and prevLogTerm
}

message RequestVoteRequest {
    uint64 term = 1;                // candidate's term
    string candidate_id = 2;        // candidate requesting vote
    uint64 last_log_index = 3;      // index of candidate's last log entry
    uint64 last_log_term = 4;       // term of candidate's last log entry
}

message RequestVoteResponse {
    uint64 term = 1;                // currentTerm, for candidate to update itself
    bool vote_granted = 2;          // true means candidate received vote
}

message Log {
    uint64 index = 1;
    uint64 term = 2;
    string command = 3;
}

/**
 * Client Interaction
 */
service RaftClusterService {
    rpc ClientRequest(ClientRequestRequest) returns (ClientRequestResponse);
    rpc RegisterClient(RegisterClientRequest) returns (RegisterClientResponse);
    rpc ClientQuery(ClientQueryRequest) returns (ClientQueryResponse);
}

enum RaftClusterStatus {
    OK = 0;
    NOT_LEADER = 1;
    SESSION_EXPIRED = 2;
}

message ClientRequestRequest {
    string client_id = 1;                   // client invoking request
    uint64 sequence_num = 2;                // to eliminate duplicates
    string command = 3;                     // request for state machine, may affect state
}

message ClientRequestResponse {
    RaftClusterStatus status = 1;           // OK if state machine applied command
    optional string response = 2;           // state machine output, if successful
    optional string leader_hint = 3;        // address of recent leader, if known
}

message RegisterClientRequest { /* No arguments */ }

message RegisterClientResponse {
    RaftClusterStatus status = 1;           // OK if state machine registered client
    optional string client_id = 2;          // unique identifier for client session
    optional string leader_hint = 3;        // address of recent leader, if known
}

message ClientQueryRequest {
    string query = 1;                       // request for state machine, read-only
}

message ClientQueryResponse {
    RaftClusterStatus status = 1;           // OK if state machine processed query
    optional string response = 2;           // state machine output, if successful
    optional string leader_hint = 3;        // address of recent leader, if known
}
